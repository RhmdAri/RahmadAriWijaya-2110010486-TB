/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main;

import db.Koneksi;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rhmd_Ari
 */
public class MenuWisata extends javax.swing.JPanel {

    /**
     * Creates new form menuDashboard
     */
    private final Connection conn;
    private String IdKategori;
    public MenuWisata() {
        initComponents();
        
        conn = Koneksi.getConnection(); 
        setTabelModel();
        loadData();
        setTableRenderer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new com.raven.datechooser.DateChooser();
        rbJenisKelamin = new javax.swing.ButtonGroup();
        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        panelAdd = new javax.swing.JPanel();
        lblTambah = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnBatal = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtLokasi = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtHarga = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtNama = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cbxKategori = new javax.swing.JComboBox<>();
        lbGambar = new javax.swing.JLabel();
        txtImagePath = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1000, 700));
        setLayout(new java.awt.CardLayout());

        panelMain.setBackground(new java.awt.Color(255, 255, 255));
        panelMain.setPreferredSize(new java.awt.Dimension(1000, 600));
        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(255, 255, 255));
        panelView.setPreferredSize(new java.awt.Dimension(1000, 600));

        tblData.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblData.setGridColor(new java.awt.Color(204, 204, 204));
        tblData.setRowHeight(100);
        tblData.setShowGrid(true);
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblData);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setText("Data Wisata");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setText("MENU UTAMA > Wisata");

        btnAdd.setBackground(new java.awt.Color(255, 255, 254));
        btnAdd.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(51, 153, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/plus.png"))); // NOI18N
        btnAdd.setText("TAMBAH");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(51, 153, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete.png"))); // NOI18N
        btnDelete.setText("HAPUS");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(51, 153, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/close.png"))); // NOI18N
        btnCancel.setText("BATAL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        txtSearch.setForeground(new java.awt.Color(204, 204, 204));
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        jButton10.setText("First Page");

        jButton11.setText("<");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton12.setText(">");

        jButton13.setText("Last Page");

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 966, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(panelViewLayout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCancel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(327, 327, 327)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(btnCancel)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton11)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12)
                    .addComponent(jButton13))
                .addGap(31, 31, 31))
        );

        panelMain.add(panelView, "card2");

        panelAdd.setBackground(new java.awt.Color(255, 255, 255));
        panelAdd.setPreferredSize(new java.awt.Dimension(1000, 600));

        lblTambah.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        lblTambah.setText("Tambah Data Wisata");

        btnSave.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(51, 153, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/diskette.png"))); // NOI18N
        btnSave.setText("SIMPAN");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnBatal.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(51, 153, 255));
        btnBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/close.png"))); // NOI18N
        btnBatal.setText("BATAL");
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel5.setText("No Wisata");

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel6.setText("Nama  Wisata");

        txtLokasi.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtLokasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLokasiActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel8.setText("Lokasi Tempat");

        txtHarga.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel9.setText("Harga");

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel10.setText("Kategori");

        cbxKategori.setBackground(new java.awt.Color(255, 255, 254));

        lbGambar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lbGambar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbGambar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/add-image.png"))); // NOI18N
        lbGambar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        txtImagePath.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        txtImagePath.setForeground(new java.awt.Color(102, 102, 102));
        txtImagePath.setText("Image Path");

        btnBrowse.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnBrowse.setText("....");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTambah)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtID)
                            .addComponent(txtNama)
                            .addComponent(txtLokasi)
                            .addComponent(txtHarga)
                            .addComponent(cbxKategori, 0, 768, Short.MAX_VALUE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelAddLayout.createSequentialGroup()
                                .addComponent(txtImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbGambar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(20, 41, Short.MAX_VALUE))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblTambah)
                .addGap(27, 27, 27)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(lbGambar, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBrowse))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddLayout.createSequentialGroup()
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLokasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addGap(7, 7, 7)
                        .addComponent(txtHarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)))
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnBatal))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        panelMain.add(panelAdd, "card2");

        add(panelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        panelMain.removeAll();
        panelMain.add(panelAdd);
        panelMain.repaint();
        panelMain.revalidate();
        
        try {
            txtID.setText(setIDwisata());
        } catch (SQLException ex) {
            Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            txtHarga.setText(setHarga());
        } catch (SQLException ex) {
            Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(btnAdd.getText().equals("UBAH")){
            dataTabel();
            btnSave.setText("PERBARUI");
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        // TODO add your handling code here:
        showPanel();
        loadData();
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (btnSave.getText().equals("TAMBAH"))
            {
                btnSave.setText("SIMPAN");
            }
        else if (btnSave.getText().equals("SIMPAN"))
            {
                insertData();
            }
        else if (btnSave.getText().equals("PERBARUI"))
            {
                updateData();
            }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtLokasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLokasiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLokasiActionPerformed

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        if (btnAdd.getText().equals("TAMBAH")){
            btnAdd.setText("UBAH");
            btnDelete.setVisible(true);
            btnCancel.setVisible(true);
        }
        
    }//GEN-LAST:event_tblDataMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        showPanel();
        loadData();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        searchData();
    }//GEN-LAST:event_txtSearchKeyTyped

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        getImage();
    }//GEN-LAST:event_btnBrowseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbxKategori;
    private com.raven.datechooser.DateChooser dateChooser1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbGambar;
    private javax.swing.JLabel lblTambah;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelView;
    private javax.swing.ButtonGroup rbJenisKelamin;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtHarga;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtImagePath;
    private javax.swing.JTextField txtLokasi;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        getKategori();
        getData((DefaultTableModel) tblData.getModel());
        btnDelete.setVisible(false);
        btnCancel.setVisible(false);
    }
    
    private void showPanel(){
        panelMain.removeAll();
        panelMain.add(new MenuWisata());
        panelMain.repaint();
        panelMain.revalidate();
    }
    
    private void resetForm() {
        txtID.setText("");
        txtNama.setText("");
        txtHarga.setText("");
        txtLokasi.setText("");
    }

    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
        model.addColumn("ID Wisata");
        model.addColumn("Nama Wisata");
        model.addColumn("Lokasi");
        model.addColumn("Harga");
        model.addColumn("ID Kategori");
        model.addColumn("Kategori");
        model.addColumn("Gambar");
    }

    private void getData(DefaultTableModel model) {
        model.setRowCount(0);
        
        try {
            String sql = "SELECT ws.id_wisata, ws.nama_wisata, ws.lokasi, ws.harga, ktg.id_kategori, ktg.nama_kategori, ws.gambar "
                    + "FROM wisata ws INNER JOIN kategori ktg ON ktg.id_kategori = ws.id_kategori ORDER BY ws.id_wisata ASC";
            try (PreparedStatement st = conn.prepareStatement(sql)){
                ResultSet rs = st.executeQuery();
                
                while (rs.next()){
                    String id           = rs.getString("id_wisata");
                    String Nama         = rs.getString("nama_wisata");
                    String Lokasi       = rs.getString("lokasi");
                    String Harga        = rs.getString("Harga");
                    String IdKategori   = rs.getString("id_kategori");
                    String NamaKategori   = rs.getString("nama_kategori");
                    
                    byte[] imageData = rs.getBytes("gambar");
                    ImageIcon imageIcon = new ImageIcon(imageData);
                
                    Object [] rowData = {id,Nama, Lokasi, Harga, IdKategori, NamaKategori, imageIcon};
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
           Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, e);
        }
    }   
    
    private void setTableRenderer(){
        class CustomRenderer extends DefaultTableCellRenderer{

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if(value instanceof ImageIcon){
                    ImageIcon icon = (ImageIcon) value;
                    Image originalImage = icon.getImage();
                    
                    int desireWidth = 120;
                    int desireHeight = 90;
                    
                    Image resizedImage = originalImage.getScaledInstance(desireWidth, desireHeight, Image.SCALE_SMOOTH);
                    ImageIcon resizedIcon = new ImageIcon(resizedImage);
                    
                    JLabel label = new JLabel(resizedIcon);
                    label.setHorizontalAlignment(JLabel.CENTER);
                    
                    return label;
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        }
        tblData.getColumnModel().getColumn(6).setCellRenderer(new CustomRenderer());
    }
    
    class ImageRender extends DefaultTableCellRenderer{

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if(value instanceof ImageIcon){
                ImageIcon icon = (ImageIcon) value;
                JLabel label = new JLabel(icon);
                label.setHorizontalAlignment(JLabel.CENTER);
                return label;
            }
            
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }
       
    }

    private String setIDwisata() throws SQLException {
        String urutan = null;
        Date now = new Date();
        SimpleDateFormat noFormat = new SimpleDateFormat("yyMM");
        String no = noFormat.format(now);

        String sql = "SELECT RIGHT(id_wisata, 3) AS Nomor " +
                     "FROM wisata " +
                     "WHERE id_wisata LIKE 'WS" + no + "%' " +
                     "ORDER BY id_wisata DESC " + // Corrected the ORDER BY clause
                     "LIMIT 1";

        try (PreparedStatement st = conn.prepareStatement(sql);
             ResultSet rs = st.executeQuery()) {

            if (rs.next()) {
                String nomorStr = rs.getString("Nomor");
                int nomor = nomorStr != null ? Integer.parseInt(nomorStr) + 1 : 1;
                urutan = "WS" + no + String.format("%03d", nomor);
            } else {
                urutan = "WS" + no + "001";
            }
        } catch (SQLException e) {
            java.util.logging.Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, e);
        }
        return urutan;
    }
     
        private String setHarga() throws SQLException {
        String urutan = null;

        String sql = "SELECT RIGHT(harga, 10) AS Nomor " +
                     "FROM wisata " +
                     "WHERE id_wisata LIKE 'Rp." + "%' " +
                     "ORDER BY id_wisata DESC " + // Corrected the ORDER BY clause
                     "LIMIT 1";

        try (PreparedStatement st = conn.prepareStatement(sql);
             ResultSet rs = st.executeQuery()) {

            if (rs.next()) {
                String nomorStr = rs.getString("Nomor");
                int nomor = nomorStr != null ? Integer.parseInt(nomorStr) + 1 : 1;
                urutan = "Rp." + String.format("%10d", nomor);
            } else {
                urutan = "Rp. " + "";
            }
        } catch (SQLException e) {
            java.util.logging.Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, e);
        }
        return urutan;
    }
    
    private void getKategori(){
        try {
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            model.addElement("Pilih Kategori");
            String sql = "SELECT id_kategori, nama_kategori FROM kategori";
            PreparedStatement st = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()){
                String NamaKategori = rs.getString("nama_kategori");
                model.addElement(NamaKategori);
            }
            
            cbxKategori.setModel(model);
            cbxKategori.addActionListener(e -> {
                int selectIndex = cbxKategori.getSelectedIndex();
                
                if(selectIndex > 0){
                    try {
                        rs.absolute(selectIndex);
                        IdKategori = rs.getString("id_kategori");
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
               
            });
       
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void getImage(){
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Gambar", "jpg","png","jpeg"));
        
        int result = fileChooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            File selecFile = fileChooser.getSelectedFile();
            String path = selecFile.getAbsolutePath();
            txtImagePath.setText(path);
            
            try {
                byte[] img = Files.readAllBytes(selecFile.toPath());
                ImageIcon imageIcon = new ImageIcon(img);
                
                int labelWidth = lbGambar.getWidth();
                int labelHeight = lbGambar.getHeight();
                
                int imageWidth = imageIcon.getIconWidth();
                int imageHeight = imageIcon.getIconHeight();
                
                double scaleX = (double) labelWidth / (double) imageWidth;
                double scaleY = (double) labelHeight / (double) imageHeight;
                double scale = Math.min(scaleX, scaleY);
                
                Image scaleImage = imageIcon.getImage().getScaledInstance(
                        (int) (scale * imageWidth),
                        (int) (scale * imageHeight), 
                        Image.SCALE_SMOOTH);
                
                lbGambar.setIcon(new ImageIcon(scaleImage));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    //Metode untuk memasukkan data wisata ke dalam database.
    private void insertData() {
        // Mendapatkan nilai dari elemen antarmuka pengguna
        String id = txtID.getText();
        String Nama = txtNama.getText();
        String Lokasi = txtLokasi.getText();
        String Harga = txtHarga.getText();
        String imagePath = txtImagePath.getText();
        
        // Memeriksa apakah semua kolom diisi
        if (id.isEmpty() || Nama.isEmpty() || Lokasi.isEmpty() || Harga.isEmpty() || cbxKategori.getSelectedItem().toString().equals("Pilih Kategori") 
                || txtImagePath.equals("Image Path")) {
            JOptionPane.showMessageDialog(this, "Semua Kolom Harus diisi !", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Menyiapkan dan menjalankan kueri SQL untuk menyisipkan data ke dalam tabel wisata
            String sql = "INSERT INTO wisata (id_wisata, nama_wisata, lokasi, Harga, id_kategori, Gambar) VALUE (?,?,?,?,?,?)";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, id);
                st.setString(2, Nama);
                st.setString(3, Lokasi);
                st.setString(4, Harga);
                st.setString(5, IdKategori);
                
                File imageFile = new File(imagePath);
                FileInputStream fis = new FileInputStream(imageFile);
                st.setBinaryStream(6, fis, (int) imageFile.length());

                // Menjalankan kueri dan memeriksa apakah data berhasil disisipkan
                int rowInserted = st.executeUpdate();
                if (rowInserted > 0) {
                    // Menampilkan pesan sukses, mereset formulir, memuat ulang data, dan menampilkan panel
                    JOptionPane.showMessageDialog(this, "Data Berhasil Ditambah");
                    resetForm();
                    loadData();
                    showPanel();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException e) {
            // Mencatat kesalahan SQL ke dalam log
            Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    //Metode ini digunakan untuk mengatur tampilan panel, memperbarui data wisata yang dipilih
    private void dataTabel() {
        // Menyembunyikan panel tampilan utama dan menampilkan panel tambah data
        panelView.setVisible(false);
        panelAdd.setVisible(true);

        // Mendapatkan indeks baris yang dipilih dari tabel data
        int row = tblData.getSelectedRow();

        // Mengatur label judul untuk menunjukkan bahwa data akan diperbarui
        lblTambah.setText("Perbarui Data wisata");

        // Mengatur elemen UI agar tidak dapat diubah (ID dan tanggal)
        txtID.setEnabled(false);
        String id = tblData.getModel().getValueAt(row, 0).toString();

        // Menampilkan informasi wisata yang dipilih pada elemen UI
        txtID.setText(tblData.getValueAt(row, 0).toString());
        txtNama.setText(tblData.getValueAt(row, 1).toString());
        txtLokasi.setText(tblData.getValueAt(row, 2).toString());
        txtHarga.setText(tblData.getValueAt(row, 3).toString());
        IdKategori = tblData.getModel().getValueAt(row, 4).toString();
        
        setImage(lbGambar, id);
        getKategoriId(IdKategori);
    }

    private void setImage(JLabel lb_gambar,String id){
        try {
            String sql = "SELECT * FROM wisata WHERE id_wisata = '"+ id +"'";
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            if(rs.next()){
                byte[] img = rs.getBytes("Gambar");
                if(img != null){
                    ImageIcon imageIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(lb_gambar.getWidth(), lb_gambar.getHeight(), Image.SCALE_SMOOTH));
                    lb_gambar.setIcon(imageIcon);
                }else{
                    ImageIcon defaultIcon = new ImageIcon(getClass().getResource("icon/add-image.png"));
                    lb_gambar.setIcon(defaultIcon);
                }
            }
        } catch (SQLException e) {
            java.util.logging.Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    private void getKategoriId(String id){
        try {
            String sql = "SELECT id_kategori, nama_kategori FROM kategori";
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()){
                String idKat = rs.getString("id_kategori");
                String namaKat = rs.getString("nama_kategori");
                
                if (id.equals(idKat)){
                    cbxKategori.setSelectedItem(namaKat);
                }
            }
            
            cbxKategori.addItemListener(new ItemListener(){
                @Override
                public void itemStateChanged(ItemEvent e){
                    if (e.getStateChange() == ItemEvent.SELECTED){
                        String selectedKat = cbxKategori.getSelectedItem().toString();
                        updateKategoriId(selectedKat);
                    }
                }
            });
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    private void updateKategoriId(String selectedKat){
        try {
            String sql = "SELECT id_kategori, nama_kategori FROM kategori WHERE nama_kategori = ?";
            PreparedStatement st = conn.prepareStatement(sql);
            st.setString(1, selectedKat);
            ResultSet rs = st.executeQuery();
            
            if (rs.next()) {
                String idKat = rs.getString("id_kategori");
            }
        } catch (Exception e) {
        }
    }

    //Metode untuk mengupdate Data di tablle
    private void updateData() {
        // Mengambil nilai dari elemen antarmuka pengguna (UI)
        String id = txtID.getText();
        String Nama = txtNama.getText();
        String Lokasi = txtLokasi.getText();
        String Harga = txtHarga.getText();
        String imagePath = txtImagePath.getText();
        
        // Memeriksa apakah semua kolom diisi
        if (id.isEmpty() || Nama.isEmpty() || Lokasi.isEmpty() || Harga.isEmpty() || cbxKategori.getSelectedItem().toString().equals("Pilih Kategori") 
                || txtImagePath.equals("Image Path")) {
            JOptionPane.showMessageDialog(this, "Semua Kolom Harus dipilih dan diisi !", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            // Membuat perintah SQL untuk melakukan update data wisata berdasarkan ID
            String sql = "UPDATE wisata SET nama_wisata=?, lokasi=?, Harga=?, id_kategori=? ";
                    if(!imagePath.equals("Image Path")){
                        sql += ",Gambar=?";
                    }
                    sql += " WHERE id_wisata=?";
                    
            try(PreparedStatement st = conn.prepareStatement(sql)){
                // Mengatur nilai parameter pada perintah SQL
                st.setString(1, Nama);
                st.setString(2, Lokasi);
                st.setString(3, Harga);
                st.setString(4, IdKategori);
                
                if (!imagePath.equals("Image Path")){
                    File imageFile = new File (imagePath);
                    FileInputStream fis = new FileInputStream(imageFile);
                    st.setBinaryStream(5, fis, (int) imageFile.length());
                    st.setString(6, id);
                }else{
                    st.setString(5, id);
                }
                
                // Mengeksekusi perintah SQL untuk melakukan update
                int rowUpdated = st.executeUpdate();
                
                // Menampilkan pesan jika update berhasil dan melakukan reset, memuat data baru, serta menampilkan panel
                if(rowUpdated > 0){
                    JOptionPane.showMessageDialog(this, "Data Berhasil Diperbarui");
                    resetForm();
                    loadData();
                    showPanel();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException e) {
            // Menangani exception SQL dengan mencatatnya dalam log
            Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, e);
        }
    }

        //Metode Digunakan untuk menghapus data
        private void deleteData() {
        // Mendapatkan baris yang dipilih pada tabel
        int selectedRow = tblData.getSelectedRow();

        // Menampilkan dialog konfirmasi untuk menghapus data
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Yakin Ingin Menghapus Data Ini?",
                "Konfirmasi Untuk Hapus",
                JOptionPane.YES_NO_OPTION);

        // Jika pengguna mengonfirmasi untuk menghapus
        if(confirm == JOptionPane.YES_OPTION){
            // Mendapatkan nilai id dari baris yang dipilih
            String id = tblData.getValueAt(selectedRow, 0).toString();
            try{
                // Query SQL untuk menghapus data dari tabel "wisata" berdasarkan id_wisata
                String sql = "DELETE FROM wisata WHERE id_wisata=?";
                try(PreparedStatement st = conn.prepareStatement(sql)){
                    st.setString(1, id);

                    // Menjalankan query untuk menghapus data
                    int rowDeleted = st.executeUpdate();
                    if (rowDeleted > 0){
                        // Menampilkan pesan sukses jika data berhasil dihapus
                        JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                    }else{
                        // Menampilkan pesan gagal jika data tidak berhasil dihapus
                        JOptionPane.showMessageDialog(this, "Data Gagal Dihapus");
                }
            }
        }catch (SQLException e) {
            // Menangani exception SQLException dan mencatat log
            Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null,e);
        }
        }

        // Mereset formulir setelah menghapus data
        resetForm();
        // Memuat ulang data pada tabel
        loadData();
        // Menampilkan panel yang sesuai
        showPanel();
    }

    //Metode ini digunakan untuk melakukan pencarian data wisata berdasarkan kata kunci.
    private void searchData() {
        // Mengambil kata kunci pencarian dari komponen teks
        String kataKunci = txtSearch.getText();

        // Mendapatkan model tabel default
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
        // Mengatur jumlah baris model tabel menjadi 0 untuk menghapus data sebelumnya
        model.setRowCount(0);

        try {
            // Query SQL untuk mencari data wisata berdasarkan ID atau nama wisata
            String sql = "SELECT ws.id_wisata, ws.nama_wisata, ws.lokasi, ws.harga, ktg.id_kategori, ktg.nama_kategori, ws.gambar "
                    + "FROM wisata ws INNER JOIN kategori ktg ON ktg.id_kategori = ws.id_kategori WHERE ws.nama_wisata LIKE ? OR ws.lokasi LIKE ? OR ktg.nama_kategori LIKE ? ";
        
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                // Mengatur parameter pada statement SQL untuk kata kunci pencarian
                st.setString(1, "%" + kataKunci + "%");
                st.setString(2, "%" + kataKunci + "%");
                 st.setString(3, "%" + kataKunci + "%");

                // Mengeksekusi query SQL dan mendapatkan hasil
                ResultSet rs = st.executeQuery();

                // Memproses hasil query dan menambahkannya ke dalam model tabel
                while (rs.next()){
                    String id           = rs.getString("id_wisata");
                    String Nama         = rs.getString("nama_wisata");
                    String Lokasi       = rs.getString("lokasi");
                    String Harga        = rs.getString("Harga");
                    String IdKategori   = rs.getString("id_kategori");
                    String NamaKategori   = rs.getString("nama_kategori");
                    
                    byte[] imageData = rs.getBytes("gambar");
                    ImageIcon imageIcon = new ImageIcon(imageData);
                
                    Object [] rowData = {id,Nama, Lokasi, Harga, IdKategori, NamaKategori, imageIcon};
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            // Menangani kesalahan SQL dengan mencatatnya ke log
            Logger.getLogger(MenuWisata.class.getName()).log(Level.SEVERE, null, e);
        }
    }


}
