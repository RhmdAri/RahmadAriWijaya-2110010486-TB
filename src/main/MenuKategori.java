package main;

import db.Koneksi;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rhmd_Ari
 */
public class MenuKategori extends javax.swing.JPanel {

    /**
     * Creates new form menuDashboard
     */
    private final Connection conn;
    public MenuKategori() {
        initComponents();
        
        conn = Koneksi.getConnection(); 
        setTabelModel();
        loadData();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new com.raven.datechooser.DateChooser();
        rbJenisKelamin = new javax.swing.ButtonGroup();
        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        panelAdd = new javax.swing.JPanel();
        lblTambah = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnBatal = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDeskripsi = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtNama = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(1000, 600));
        setLayout(new java.awt.CardLayout());

        panelMain.setBackground(new java.awt.Color(255, 255, 255));
        panelMain.setPreferredSize(new java.awt.Dimension(1000, 600));
        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(255, 255, 255));
        panelView.setPreferredSize(new java.awt.Dimension(1000, 600));

        tblData.setBackground(new java.awt.Color(255, 255, 254));
        tblData.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblData.setGridColor(new java.awt.Color(204, 204, 204));
        tblData.setRowHeight(40);
        tblData.setShowGrid(true);
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblData);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setText("Data Kategori Wisata");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setText("TRANSAKSI > Kategori");

        btnAdd.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(51, 153, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/plus.png"))); // NOI18N
        btnAdd.setText("TAMBAH");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(51, 153, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete.png"))); // NOI18N
        btnDelete.setText("HAPUS");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(51, 153, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/close.png"))); // NOI18N
        btnCancel.setText("BATAL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        txtSearch.setForeground(new java.awt.Color(204, 204, 204));
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        jButton10.setText("First Page");

        jButton11.setText("<");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton12.setText(">");

        jButton13.setText("Last Page");

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGap(327, 327, 327)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton13))
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelViewLayout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelViewLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(602, 602, 602)
                                .addComponent(jLabel2))
                            .addComponent(jScrollPane1))))
                .addGap(20, 20, 20))
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnDelete)
                            .addComponent(btnCancel)))
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton11)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12)
                    .addComponent(jButton13))
                .addGap(31, 31, 31))
        );

        panelMain.add(panelView, "card2");

        panelAdd.setBackground(new java.awt.Color(255, 255, 255));
        panelAdd.setPreferredSize(new java.awt.Dimension(1000, 600));

        lblTambah.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        lblTambah.setText("Tambah Data Kategori Wisata");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel4.setText("Master Data > Dashboard");

        btnSave.setBackground(new java.awt.Color(255, 255, 254));
        btnSave.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(51, 153, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/diskette.png"))); // NOI18N
        btnSave.setText("SIMPAN");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnBatal.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(51, 153, 255));
        btnBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/close.png"))); // NOI18N
        btnBatal.setText("BATAL");
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel5.setText("ID");

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel6.setText("Nama ");

        txtDeskripsi.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel9.setText("Deskripsi");

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(lblTambah)
                        .addGap(511, 511, 511)
                        .addComponent(jLabel4))
                    .addComponent(txtDeskripsi)
                    .addComponent(txtID)
                    .addComponent(txtNama))
                .addContainerGap())
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblTambah))
                .addGap(27, 27, 27)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDeskripsi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(208, 208, 208)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnBatal))
                .addContainerGap(113, Short.MAX_VALUE))
        );

        panelMain.add(panelAdd, "card2");

        add(panelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        panelMain.removeAll();
        panelMain.add(panelAdd);
        panelMain.repaint();
        panelMain.revalidate();
        
        try {
            txtID.setText(setIDkategori());
        } catch (SQLException ex) {
            Logger.getLogger(MenuKategori.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(btnAdd.getText().equals("UBAH")){
            dataTabel();
            btnSave.setText("PERBARUI");
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        if (btnAdd.getText().equals("TAMBAH")){
            btnAdd.setText("UBAH");
            btnDelete.setVisible(true);
            btnCancel.setVisible(true);
        }
        
    }//GEN-LAST:event_tblDataMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        showPanel();
        loadData();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        searchData();
    }//GEN-LAST:event_txtSearchKeyTyped

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        // TODO add your handling code here:
        showPanel();
        loadData();
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (btnSave.getText().equals("TAMBAH"))
        {
            btnSave.setText("SIMPAN");
        }
        else if (btnSave.getText().equals("SIMPAN"))
        {
            insertData();
        }
        else if (btnSave.getText().equals("PERBARUI"))
        {
            updateData();
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private com.raven.datechooser.DateChooser dateChooser1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTambah;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelView;
    private javax.swing.ButtonGroup rbJenisKelamin;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtDeskripsi;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        getData((DefaultTableModel) tblData.getModel());
        btnDelete.setVisible(false);
        btnCancel.setVisible(false);
    }
    
    private void showPanel(){
        panelMain.removeAll();
        panelMain.add(new MenuKategori());
        panelMain.repaint();
        panelMain.revalidate();
    }
    
    private void resetForm() {
        txtID.setText("");
        txtNama.setText("");
        txtDeskripsi.setText("");
    }

    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
        model.addColumn("ID kategori");
        model.addColumn("Nama kategori");
        model.addColumn("Deskripsi Kategori");
    }

    private void getData(DefaultTableModel model) {
        model.setRowCount(0);
        
        try {
            String sql = "SELECT * FROM kategori";
            try (PreparedStatement st = conn.prepareStatement(sql)){
                ResultSet rs = st.executeQuery();
                
                while (rs.next()){
                    String id           = rs.getString("id_kategori");
                    String Nama         = rs.getString("nama_kategori");
                    String Kategori     = rs.getString("desc_kategori");
                
                    Object [] rowData = {id, Nama, Kategori};
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
           Logger.getLogger(MenuKategori.class.getName()).log(Level.SEVERE, null, e);
        }
    }   

    private String setIDkategori() throws SQLException {
        String urutan = null;
        Date now = new Date();
        SimpleDateFormat noFormat = new SimpleDateFormat("yyMM");
        String no = noFormat.format(now);

        String sql = "SELECT RIGHT(id_kategori, 3) AS Nomor " +
                     "FROM kategori " +
                     "WHERE id_kategori LIKE 'KTG" + no + "%' " +
                     "ORDER BY id_kategori DESC " + // Corrected the ORDER BY clause
                     "LIMIT 1";

        try (PreparedStatement st = conn.prepareStatement(sql);
             ResultSet rs = st.executeQuery()) {

            if (rs.next()) {
                String nomorStr = rs.getString("Nomor");
                int nomor = nomorStr != null ? Integer.parseInt(nomorStr) + 1 : 1;
                urutan = "KTG" + no + String.format("%03d", nomor);
            } else {
                urutan = "KTG" + no + "001";
            }
        } catch (SQLException e) {
            java.util.logging.Logger.getLogger(MenuKategori.class.getName()).log(Level.SEVERE, null, e);
        }
        return urutan;
    }
    
    public boolean validasiNama(){
        boolean valid = false;
        String id = txtID.getText();
        String Nama = txtNama.getText();
        
        String sql = "SELECT nama_kategori From kategori WHERE id_kategori!='"+id+"' AND nama_kategori LIKE BINARY '"+ Nama +"'";
        try (PreparedStatement st = conn.prepareStatement(sql)){
            ResultSet rs = st.executeQuery();
            
            if(rs.next()){
                JOptionPane.showMessageDialog(this, "Nama Kategori Sudah ada\nSilahkan Input Nama Kategori yang Berbeda",
                        "Peringatan",JOptionPane.WARNING_MESSAGE);
        }else{
                valid = true;
            }
        } catch (Exception e) {
            Logger.getLogger(MenuKategori.class.getName()).log(Level.SEVERE, null, e);
        }
        
        return valid;
    }

    //Metode untuk memasukkan data kategori ke dalam database.
    private void insertData() {
    // Mendapatkan nilai dari elemen antarmuka pengguna
    String id = txtID.getText();
    String Nama = txtNama.getText();
    String Kategori = txtDeskripsi.getText();

    // Memeriksa apakah semua kolom diisi
    if (id.isEmpty() || Nama.isEmpty() || Kategori.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua Kolom Harus diisi !", "Validasi", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    if(!validasiNama()){
        return;
    }

    try {
        // Menyiapkan dan menjalankan kueri SQL untuk menyisipkan data ke dalam tabel kategori
        String sql = "INSERT INTO kategori (id_kategori, nama_kategori, desc_kategori) VALUES (?, ?, ?)";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, id);
            st.setString(2, Nama);
            st.setString(3, Kategori);

            // Menjalankan kueri dan memeriksa apakah data berhasil disisipkan
            int rowInserted = st.executeUpdate();
            if (rowInserted > 0) {
                // Menampilkan pesan sukses, mereset formulir, memuat ulang data, dan menampilkan panel
                JOptionPane.showMessageDialog(this, "Data Berhasil Ditambah");
                resetForm();
                loadData();
                showPanel();
            }
        }
    } catch (SQLException e) {
        // Mencatat kesalahan SQL ke dalam log
        Logger.getLogger(MenuKategori.class.getName()).log(Level.SEVERE, null, e);
    }
    }


    //Metode ini digunakan untuk mengatur tampilan panel, memperbarui data kategori yang dipilih
    private void dataTabel() {
        // Menyembunyikan panel tampilan utama dan menampilkan panel tambah data
        panelView.setVisible(false);
        panelAdd.setVisible(true);

        // Mendapatkan indeks baris yang dipilih dari tabel data
        int row = tblData.getSelectedRow();

        // Mengatur label judul untuk menunjukkan bahwa data akan diperbarui
        lblTambah.setText("Perbarui Data kategori");

        // Mengatur elemen UI agar tidak dapat diubah (ID dan tanggal)
        txtID.setEnabled(false);

        // Menampilkan informasi kategori yang dipilih pada elemen UI
        txtID.setText(tblData.getValueAt(row, 0).toString());
        txtNama.setText(tblData.getValueAt(row, 1).toString());
        txtDeskripsi.setText(tblData.getValueAt(row, 2).toString());
    }


    //Metode untuk mengupdate Data di tablle
    private void updateData() {
        // Mengambil nilai dari elemen antarmuka pengguna (UI)
        String id = txtID.getText();
        String Nama = txtNama.getText();
        String Kategori = txtDeskripsi.getText();
 
        // Memeriksa apakah semua kolom isian telah diisi
        if(id.isEmpty() || Nama.isEmpty() || Kategori.isEmpty()){
            // Menampilkan pesan kesalahan jika ada kolom yang belum diisi
            JOptionPane.showMessageDialog(this, "Semua Kolom Harus diisi !", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            // Membuat perintah SQL untuk melakukan update data kategori berdasarkan ID
            String sql = "UPDATE kategori SET nama_kategori=?, desc_kategori=? WHERE id_kategori=?";
            try(PreparedStatement st = conn.prepareStatement(sql)){
                // Mengatur nilai parameter pada perintah SQL
                st.setString(1, Nama);
                st.setString(2, Kategori);
                st.setString(3, id);
                
                // Mengeksekusi perintah SQL untuk melakukan update
                int rowUpdated = st.executeUpdate();
                
                // Menampilkan pesan jika update berhasil dan melakukan reset, memuat data baru, serta menampilkan panel
                if(rowUpdated > 0){
                    JOptionPane.showMessageDialog(this, "Data Berhasil Diperbarui");
                    resetForm();
                    loadData();
                    showPanel();
                }
            }
        } catch (SQLException e) {
            // Menangani exception SQL dengan mencatatnya dalam log
            Logger.getLogger(MenuKategori.class.getName()).log(Level.SEVERE, null, e);
        }
    }

        //Metode Digunakan untuk menghapus data
        private void deleteData() {
        // Mendapatkan baris yang dipilih pada tabel
        int selectedRow = tblData.getSelectedRow();

        // Menampilkan dialog konfirmasi untuk menghapus data
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Yakin Ingin Menghapus Data Ini?",
                "Konfirmasi Untuk Hapus",
                JOptionPane.YES_NO_OPTION);

        // Jika pengguna mengonfirmasi untuk menghapus
        if(confirm == JOptionPane.YES_OPTION){
            // Mendapatkan nilai id dari baris yang dipilih
            String id = tblData.getValueAt(selectedRow, 0).toString();
            try{
                // Query SQL untuk menghapus data dari tabel "kategori" berdasarkan id_kategori
                String sql = "DELETE FROM kategori WHERE id_kategori=?";
                try(PreparedStatement st = conn.prepareStatement(sql)){
                    st.setString(1, id);

                    // Menjalankan query untuk menghapus data
                    int rowDeleted = st.executeUpdate();
                    if (rowDeleted > 0){
                        // Menampilkan pesan sukses jika data berhasil dihapus
                        JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                    }else{
                        // Menampilkan pesan gagal jika data tidak berhasil dihapus
                        JOptionPane.showMessageDialog(this, "Data Gagal Dihapus");
                }
            }
        }catch (SQLException e) {
            // Menangani exception SQLException dan mencatat log
            Logger.getLogger(MenuKategori.class.getName()).log(Level.SEVERE, null,e);
        }
        }

        // Mereset formulir setelah menghapus data
        resetForm();
        // Memuat ulang data pada tabel
        loadData();
        // Menampilkan panel yang sesuai
        showPanel();
    }

    //Metode ini digunakan untuk melakukan pencarian data kategori berdasarkan kata kunci.
    private void searchData() {
        // Mengambil kata kunci pencarian dari komponen teks
        String kataKunci = txtSearch.getText();

        // Mendapatkan model tabel default
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
        // Mengatur jumlah baris model tabel menjadi 0 untuk menghapus data sebelumnya
        model.setRowCount(0);

        try {
            // Query SQL untuk mencari data kategori berdasarkan ID atau nama kategori
            String sql = "SELECT * FROM kategori WHERE id_kategori LIKE ? OR nama_kategori LIKE ?";        
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                // Mengatur parameter pada statement SQL untuk kata kunci pencarian
                st.setString(1, "%" + kataKunci + "%");
                st.setString(2, "%" + kataKunci + "%");

                // Mengeksekusi query SQL dan mendapatkan hasil
                ResultSet rs = st.executeQuery();

                // Memproses hasil query dan menambahkannya ke dalam model tabel
                while (rs.next()) {
                    String id = rs.getString("id_kategori");
                    String Nama = rs.getString("nama_kategori");
                    String Kategori = rs.getString("desc_kategori");

                    // Membuat array objek berisi data kategori
                    Object[] rowData = {id, Nama, Kategori};
                    // Menambahkan data kategori ke dalam model tabel
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            // Menangani kesalahan SQL dengan mencatatnya ke log
            Logger.getLogger(MenuKategori.class.getName()).log(Level.SEVERE, null, e);
        }
    }


}
